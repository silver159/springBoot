<br />
<div>
	{{#commentsDtos}}
	<div class="card border-primary mb-3" id="comments-{{id}}">
		<div class="card-header text-bg-warning">
			{{nickname}}
			<!-- 수정 버튼, 부트 스트랩에서 복사한 내용, Static backdrop -->
			<!-- Button trigger modal -->
			<!-- 수정 버튼이 클릭되면 수정 폼에 commentsDtos의 데이터를 넣어준다. -->
			<button 
				type="button" 
				class="btn btn-outline-primary btn-sm" 
				data-bs-toggle="modal"
				data-bs-target="#comment-edit-modal"
				
				data-bs-id="{{id}}"
				data-bs-nickname="{{nickname}}"
				data-bs-body="{{body}}"
				data-bs-article-id="{{articleId}}"
				
				>수정
			</button>
			<!-- 삭제 버튼 -->
			<!-- 삭제 버튼이 클릭되면 삭제할 댓글의 id를 넣어준다. -->
			<button 
				type="button" 
				class="btn btn-outline-danger btn-sm comment-delete-btn" 
				data-bs-comment-id="{{id}}"
				>삭제
			</button>
			
		</div>
		<div class="card-body">{{body}}</div>
	</div>
	{{/commentsDtos}} {{^commentsDtos}}
	<div class="card border-primary mb-3">
		<div class="card-header text-bg-warning">댓글이 없습니다.</div>
	</div>
	{{/commentsDtos}}
</div>

<!-- Modal -->
<div class="modal fade" id="comment-edit-modal" data-bs-backdrop="static"
	data-bs-keyboard="false" tabindex="-1"
	aria-labelledby="staticBackdropLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h1 class="modal-title fs-5" id="staticBackdropLabel">댓글 수정</h1>
				<button type="button" class="btn-close" data-bs-dismiss="modal"
					aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<!-- 수정 폼 => newComment.mustache의 댓글 작성 폼을 복사해서 수정한다. -->
				<form>
					<!-- 닉네임 입력 -->
					<div class="mb-3">
						<label class="form-label">닉네임</label>
						<input class="form-control form-control-sm" id="edit-comment-nickname"/>
					</div>
					<!-- 댓글 입력 -->
					<div class="mb-3">
						<label class="form-label">댓글 입력</label>
						<textarea 
							class="form-control form-control-sm" 
							rows="3" 
							style="resize:none;"
							id="edit-comment-body"
						></textarea>
					</div>
					<!-- 메인글의 id와 댓글의 id를 hidden으로 전달한다. -->
					<input type="hidden" id="edit-comment-article-id" value=""><!-- 메인글 id -->
					<input type="hidden" id="edit-comment-id" value=""><!-- 댓글 id -->
					
					<!-- 저장 버튼 -->
					<button 
						type="button" 
						class="btn btn-outline-primary btn-sm" 
						id="comment-update-btn">
						댓글 수정
					</button>
					<button type="button" class="btn btn-outline-danger btn-sm" data-bs-dismiss="modal">취소</button>
				</form>
			</div>
		</div>
	</div>
</div>

<script type="text/javascript">
// 댓글 저장 REST API
{
// 모달 요소 선택
	const commentEditModal = document.querySelector('#comment-edit-modal');
	if (commentEditModal) {
		// 모달 이벤트 지정
		commentEditModal.addEventListener('show.bs.modal', event => {
			console.log('모달창 열림');
			// 모달이 열릴 때 event에서 트리거(모달 창을 띄우는) 버튼을 선택한다.
			const button = event.relatedTarget;
			// 수정 버튼이 클릭될 떄 'data-bs-*' 데이터 가져오기
			// console.log('id: '+ button.getAttribute('data-bs-id'));
			// console.log('nickname: '+ button.getAttribute('data-bs-nickname'));
			// console.log('body: '+ button.getAttribute('data-bs-body'));
			// console.log('articleId: '+ button.getAttribute('data-bs-article-id'));
			const id = button.getAttribute('data-bs-id');
			const nickname = button.getAttribute('data-bs-nickname');
			const body = button.getAttribute('data-bs-body');
			const articleId = button.getAttribute('data-bs-article-id');
			// 수정 버튼이 클릭될 때 가져온 데이터를 수정 폼에 넣어준다.
			document.querySelector('#edit-comment-id').value = id;
			document.querySelector('#edit-comment-nickname').value = nickname;
			document.querySelector('#edit-comment-body').value = body;
			document.querySelector('#edit-comment-article-id').value = articleId;
		});
	}
}

// 댓글 수정 REST API
{
// 모달 창의 수정 버튼을 선택해서 click 이벤트를 걸어준다.
	const commentUpdateBtn = document.querySelector('#comment-update-btn')
	commentUpdateBtn.addEventListener('click', function(){
		console.log('수정 버튼 클릭');
		// 수정할 댓글 javascript 객체를 생성한다.
		const comment = {
				id: document.querySelector('#edit-comment-id').value,
				nickname: document.querySelector('#edit-comment-nickname').value,
				body: document.querySelector('#edit-comment-body').value,
				article_id: document.querySelector('#edit-comment-article-id').value
		}
		console.log(comment);
		console.log(JSON.stringify(comment)); // javascript 객체를 json으로 변경한다.
		
		// fetch Ajax를 이용해서 REST APT를 호출한다.
		const url = '/api/comments/'+ comment.id ;
		console.log(url);
		fetch(url,{
			method: 'PATCH', // PATCH 요청, 대문자로
			body: JSON.stringify(comment),  // JSON은 body 넣어 보내준다.
			headers: {
				'content-Type': 'application/json'
			}
		}).then(response => {
			console.log(response);
			const msg = response.ok ? '댓글 수정 성공' : '댓글 수정 실패';
			alert(msg);
			// 현재 페이지를 새로고침 한다.
			location.reload();
		});
		
	})
}

// 댓글 삭제 REST API
{
// 삭제 버튼들을 선택한다.
	const commentDeleteBtns = document.querySelectorAll('.comment-delete-btn');
	// console.log(commentDeleteBtns.length);
// 각 삭제 버튼들의 이벤트 처리
	commentDeleteBtns.forEach( btn => {
		btn.addEventListener('click', event => {
			console.log('삭제 버튼 클릭');
			// 이벤트가 발생한 요소(버튼)를 선택한다.
			const commentDeleteBtn = event.srcElement;
			// 삭제할 댓글의 id를 가져온다.
			const commentId = commentDeleteBtn.getAttribute('data-bs-comment-id')
			console.log(`삭제 버튼 클릭: ${commentId}번 댓글`);
			
			// fetch Ajax를 이용해서 REST APT를 호출한다.
			const url = `/api/comments/${commentId}`;
			console.log(url);
			fetch(url,{
				method: 'DELETE', // DELETE 요청, 대문자로
				
			}).then(response => {
				/*
				console.log(response);
				const msg = response.ok ? '댓글 삭제 성공' : '댓글 삭제 실패';
				alert(msg);
				// 현재 페이지를 새로고침 한다.
				location.reload();
				*/
				// then()으로 왔다면 댓글은 이미 삭제된 상태이므로 삭제된 댓글들 화면에서 
				// 지운다.
				const target = document.querySelector(`#comments-${commentId}`);
				// remove() 함수는 화면을 새로고침 하지 않고 삭제된 댓글의 card 레이아웃을
				// 삭제한다.
				target.remove();
			});
		});
	});
}
</script>